/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedUsers,
  ProblemDetails,
  SortOrder,
  UserDetailsResponseModel,
  UserResponseModel,
  UsersSortParameter,
} from '../models/index';
import {
    PaginatedUsersFromJSON,
    PaginatedUsersToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
    UserDetailsResponseModelFromJSON,
    UserDetailsResponseModelToJSON,
    UserResponseModelFromJSON,
    UserResponseModelToJSON,
    UsersSortParameterFromJSON,
    UsersSortParameterToJSON,
} from '../models/index';

export interface TeamsTeamUsersByEmailEmailGetRequest {
    email: string;
    team: string;
}

export interface TeamsTeamUsersByExternalIdExternalIdGetRequest {
    externalId: string;
    team: string;
}

export interface TeamsTeamUsersGetRequest {
    team: string;
    page?: number;
    pageSize?: TeamsTeamUsersGetPageSizeEnum;
    sort?: UsersSortParameter;
    order?: SortOrder;
}

export interface TeamsTeamUsersMeGetRequest {
    team: string;
}

export interface TeamsTeamUsersUserIdGetRequest {
    userId: number;
    team: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Retrieve a user by email address
     */
    async teamsTeamUsersByEmailEmailGetRaw(requestParameters: TeamsTeamUsersByEmailEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsResponseModel>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling teamsTeamUsersByEmailEmailGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamUsersByEmailEmailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/users/by-email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieve a user by email address
     */
    async teamsTeamUsersByEmailEmailGet(requestParameters: TeamsTeamUsersByEmailEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsResponseModel> {
        const response = await this.teamsTeamUsersByEmailEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a user by external ID
     */
    async teamsTeamUsersByExternalIdExternalIdGetRaw(requestParameters: TeamsTeamUsersByExternalIdExternalIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponseModel>>> {
        if (requestParameters['externalId'] == null) {
            throw new runtime.RequiredError(
                'externalId',
                'Required parameter "externalId" was null or undefined when calling teamsTeamUsersByExternalIdExternalIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamUsersByExternalIdExternalIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/users/by-external-id/{externalId}`.replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters['externalId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseModelFromJSON));
    }

    /**
     * Retrieve a user by external ID
     */
    async teamsTeamUsersByExternalIdExternalIdGet(requestParameters: TeamsTeamUsersByExternalIdExternalIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponseModel>> {
        const response = await this.teamsTeamUsersByExternalIdExternalIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all users on the site or team.
     * Retrieve all users
     */
    async teamsTeamUsersGetRaw(requestParameters: TeamsTeamUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUsers>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/users`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUsersFromJSON(jsonValue));
    }

    /**
     * Retrieves all users on the site or team.
     * Retrieve all users
     */
    async teamsTeamUsersGet(requestParameters: TeamsTeamUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUsers> {
        const response = await this.teamsTeamUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details for the logged-in user.
     * Retrieve logged-in user details
     */
    async teamsTeamUsersMeGetRaw(requestParameters: TeamsTeamUsersMeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsResponseModel>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamUsersMeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/users/me`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves details for the logged-in user.
     * Retrieve logged-in user details
     */
    async teamsTeamUsersMeGet(requestParameters: TeamsTeamUsersMeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsResponseModel> {
        const response = await this.teamsTeamUsersMeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details for a user, identified by user ID.
     * Retrieve a user
     */
    async teamsTeamUsersUserIdGetRaw(requestParameters: TeamsTeamUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsResponseModel>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling teamsTeamUsersUserIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamUsersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves details for a user, identified by user ID.
     * Retrieve a user
     */
    async teamsTeamUsersUserIdGet(requestParameters: TeamsTeamUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsResponseModel> {
        const response = await this.teamsTeamUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TeamsTeamUsersGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamUsersGetPageSizeEnum = typeof TeamsTeamUsersGetPageSizeEnum[keyof typeof TeamsTeamUsersGetPageSizeEnum];
