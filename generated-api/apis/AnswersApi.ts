/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnswerRequestModel,
  AnswerResponseModel,
  AnswerSummaryResponseModel,
  AnswersSortParameter,
  FlagOptionResponseModel,
  FlagRequestModel,
  PaginatedAnswers,
  ProblemDetails,
  SortOrder,
} from '../models/index';
import {
    AnswerRequestModelFromJSON,
    AnswerRequestModelToJSON,
    AnswerResponseModelFromJSON,
    AnswerResponseModelToJSON,
    AnswerSummaryResponseModelFromJSON,
    AnswerSummaryResponseModelToJSON,
    AnswersSortParameterFromJSON,
    AnswersSortParameterToJSON,
    FlagOptionResponseModelFromJSON,
    FlagOptionResponseModelToJSON,
    FlagRequestModelFromJSON,
    FlagRequestModelToJSON,
    PaginatedAnswersFromJSON,
    PaginatedAnswersToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models/index';

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDeleteRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPostRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdDeleteRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDeleteRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePostRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGetRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPostRequest {
    questionId: number;
    answerId: number;
    team: string;
    flagRequestModel?: FlagRequestModel;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdGetRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdPutRequest {
    questionId: number;
    answerId: number;
    team: string;
    answerRequestModel?: AnswerRequestModel;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDeleteRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePostRequest {
    questionId: number;
    answerId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdAnswersGetRequest {
    questionId: number;
    team: string;
    page?: number;
    pageSize?: TeamsTeamQuestionsQuestionIdAnswersGetPageSizeEnum;
    sort?: AnswersSortParameter;
    order?: SortOrder;
}

export interface TeamsTeamQuestionsQuestionIdAnswersPostRequest {
    questionId: number;
    team: string;
    answerRequestModel?: AnswerRequestModel;
}

/**
 * 
 */
export class AnswersApi extends runtime.BaseAPI {

    /**
     * Unaccepts an answer, identified by question ID and answer ID.
     * Unaccept an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDelete().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/accept`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Unaccepts an answer, identified by question ID and answer ID.
     * Unaccept an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDelete(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts an answer, identified by question ID and answer ID.
     * Accept an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPostRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPost().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/accept`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Accepts an answer, identified by question ID and answer ID.
     * Accept an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPost(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdAcceptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an answer, identified by question ID and answer ID.
     * Delete an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDelete().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an answer, identified by question ID and answer ID.
     * Delete an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDelete(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the downvote of an answer, identified by question ID and answer ID.
     * Delete answer downvote
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDelete().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/downvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Deletes the downvote of an answer, identified by question ID and answer ID.
     * Delete answer downvote
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDelete(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvoteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downvotes an answer, identified by question ID and answer ID.
     * Downvote an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePostRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePost().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/downvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Downvotes an answer, identified by question ID and answer ID.
     * Downvote an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePost(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdDownvotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of flag options for an answer, identified by question ID and answer ID.
     * Retrive a list of flag options
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlagOptionResponseModel>>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGet().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/flags/options`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlagOptionResponseModelFromJSON));
    }

    /**
     * Retrieve a list of flag options for an answer, identified by question ID and answer ID.
     * Retrive a list of flag options
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGet(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlagOptionResponseModel>> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsOptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Raises a flag for an answer, identified by question ID and answer ID.
     * Raises a flag for an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPostRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPost().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/flags`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlagRequestModelToJSON(requestParameters['flagRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Raises a flag for an answer, identified by question ID and answer ID.
     * Raises a flag for an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPost(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdFlagsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an answer to a question, identified by question ID and answer ID.
     * Retrieve an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdGet().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves an answer to a question, identified by question ID and answer ID.
     * Retrieve an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdGet(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an answer, identified by question ID and answer ID.
     * Update an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdPutRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdPut().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdPut().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerRequestModelToJSON(requestParameters['answerRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerResponseModelFromJSON(jsonValue));
    }

    /**
     * Updates an answer, identified by question ID and answer ID.
     * Update an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdPut(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the upvote of an answer, identified by question ID and answer ID.
     * Delete answer upvote
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDelete().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/upvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Deletes the upvote of an answer, identified by question ID and answer ID.
     * Delete answer upvote
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDelete(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvoteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upvotes an answer, identified by question ID and answer ID.
     * Upvote an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePostRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerSummaryResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePost().'
            );
        }

        if (requestParameters['answerId'] == null) {
            throw new runtime.RequiredError(
                'answerId',
                'Required parameter "answerId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers/{answerId}/upvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters['answerId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerSummaryResponseModelFromJSON(jsonValue));
    }

    /**
     * Upvotes an answer, identified by question ID and answer ID.
     * Upvote an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePost(requestParameters: TeamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerSummaryResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersAnswerIdUpvotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all answers to a question, identified by question ID.
     * Retrieve all answers to a question
     */
    async teamsTeamQuestionsQuestionIdAnswersGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAnswers>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAnswersFromJSON(jsonValue));
    }

    /**
     * Retrieves all answers to a question, identified by question ID.
     * Retrieve all answers to a question
     */
    async teamsTeamQuestionsQuestionIdAnswersGet(requestParameters: TeamsTeamQuestionsQuestionIdAnswersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAnswers> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an answer to a question, identified by question ID.
     * Create an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersPostRaw(requestParameters: TeamsTeamQuestionsQuestionIdAnswersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdAnswersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/answers`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerRequestModelToJSON(requestParameters['answerRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerResponseModelFromJSON(jsonValue));
    }

    /**
     * Creates an answer to a question, identified by question ID.
     * Create an answer
     */
    async teamsTeamQuestionsQuestionIdAnswersPost(requestParameters: TeamsTeamQuestionsQuestionIdAnswersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdAnswersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TeamsTeamQuestionsQuestionIdAnswersGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamQuestionsQuestionIdAnswersGetPageSizeEnum = typeof TeamsTeamQuestionsQuestionIdAnswersGetPageSizeEnum[keyof typeof TeamsTeamQuestionsQuestionIdAnswersGetPageSizeEnum];
