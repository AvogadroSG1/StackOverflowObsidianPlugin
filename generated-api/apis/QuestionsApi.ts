/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FlagOptionResponseModel,
  FlagRequestModel,
  LinkedOrRelatedQuestionsSortParameter,
  PaginatedLinkedOrRelatedQuestions,
  PaginatedQuestions,
  ProblemDetails,
  QuestionRequestModel,
  QuestionResponseModel,
  QuestionSortParameter,
  SortOrder,
} from '../models/index';
import {
    FlagOptionResponseModelFromJSON,
    FlagOptionResponseModelToJSON,
    FlagRequestModelFromJSON,
    FlagRequestModelToJSON,
    LinkedOrRelatedQuestionsSortParameterFromJSON,
    LinkedOrRelatedQuestionsSortParameterToJSON,
    PaginatedLinkedOrRelatedQuestionsFromJSON,
    PaginatedLinkedOrRelatedQuestionsToJSON,
    PaginatedQuestionsFromJSON,
    PaginatedQuestionsToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuestionRequestModelFromJSON,
    QuestionRequestModelToJSON,
    QuestionResponseModelFromJSON,
    QuestionResponseModelToJSON,
    QuestionSortParameterFromJSON,
    QuestionSortParameterToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models/index';

export interface TeamsTeamQuestionsGetRequest {
    team: string;
    page?: number;
    pageSize?: TeamsTeamQuestionsGetPageSizeEnum;
    sort?: QuestionSortParameter;
    order?: SortOrder;
    isAnswered?: boolean;
    hasAcceptedAnswer?: boolean;
    questionId?: Array<number>;
    tagId?: Array<number>;
    authorId?: number;
    from?: Date;
    to?: Date;
}

export interface TeamsTeamQuestionsPostRequest {
    team: string;
    questionRequestModel?: QuestionRequestModel;
}

export interface TeamsTeamQuestionsQuestionIdBookmarkDeleteRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdBookmarkPostRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdDeleteRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdDownvoteDeleteRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdDownvotePostRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdFlagsOptionsGetRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdFlagsPostRequest {
    questionId: number;
    team: string;
    flagRequestModel?: FlagRequestModel;
}

export interface TeamsTeamQuestionsQuestionIdGetRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdLinkedGetRequest {
    questionId: number;
    team: string;
    page?: number;
    pageSize?: TeamsTeamQuestionsQuestionIdLinkedGetPageSizeEnum;
    sort?: LinkedOrRelatedQuestionsSortParameter;
    order?: SortOrder;
}

export interface TeamsTeamQuestionsQuestionIdPutRequest {
    questionId: number;
    team: string;
    questionRequestModel?: QuestionRequestModel;
}

export interface TeamsTeamQuestionsQuestionIdRelatedGetRequest {
    questionId: number;
    team: string;
    page?: number;
    pageSize?: TeamsTeamQuestionsQuestionIdRelatedGetPageSizeEnum;
    sort?: LinkedOrRelatedQuestionsSortParameter;
    order?: SortOrder;
}

export interface TeamsTeamQuestionsQuestionIdUpvoteDeleteRequest {
    questionId: number;
    team: string;
}

export interface TeamsTeamQuestionsQuestionIdUpvotePostRequest {
    questionId: number;
    team: string;
}

/**
 * 
 */
export class QuestionsApi extends runtime.BaseAPI {

    /**
     * Retrieves all questions on the site or team.
     * Retrieve all questions
     */
    async teamsTeamQuestionsGetRaw(requestParameters: TeamsTeamQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestions>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['isAnswered'] != null) {
            queryParameters['isAnswered'] = requestParameters['isAnswered'];
        }

        if (requestParameters['hasAcceptedAnswer'] != null) {
            queryParameters['hasAcceptedAnswer'] = requestParameters['hasAcceptedAnswer'];
        }

        if (requestParameters['questionId'] != null) {
            queryParameters['questionId'] = requestParameters['questionId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tagId'] = requestParameters['tagId'];
        }

        if (requestParameters['authorId'] != null) {
            queryParameters['authorId'] = requestParameters['authorId'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionsFromJSON(jsonValue));
    }

    /**
     * Retrieves all questions on the site or team.
     * Retrieve all questions
     */
    async teamsTeamQuestionsGet(requestParameters: TeamsTeamQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestions> {
        const response = await this.teamsTeamQuestionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a question.
     * Create a question
     */
    async teamsTeamQuestionsPostRaw(requestParameters: TeamsTeamQuestionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionRequestModelToJSON(requestParameters['questionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Creates a question.
     * Create a question
     */
    async teamsTeamQuestionsPost(requestParameters: TeamsTeamQuestionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unbookmarks a question, identified by question ID.
     * Unbookmark question
     */
    async teamsTeamQuestionsQuestionIdBookmarkDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdBookmarkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdBookmarkDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdBookmarkDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/bookmark`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Unbookmarks a question, identified by question ID.
     * Unbookmark question
     */
    async teamsTeamQuestionsQuestionIdBookmarkDelete(requestParameters: TeamsTeamQuestionsQuestionIdBookmarkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdBookmarkDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bookmarks a question, identified by question ID.
     * Bookmark question
     */
    async teamsTeamQuestionsQuestionIdBookmarkPostRaw(requestParameters: TeamsTeamQuestionsQuestionIdBookmarkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdBookmarkPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdBookmarkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/bookmark`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Bookmarks a question, identified by question ID.
     * Bookmark question
     */
    async teamsTeamQuestionsQuestionIdBookmarkPost(requestParameters: TeamsTeamQuestionsQuestionIdBookmarkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdBookmarkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a question, identified by question ID.
     * Delete a question
     */
    async teamsTeamQuestionsQuestionIdDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a question, identified by question ID.
     * Delete a question
     */
    async teamsTeamQuestionsQuestionIdDelete(requestParameters: TeamsTeamQuestionsQuestionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamQuestionsQuestionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the downvote of a question, identified by question ID.
     * Delete question downvote
     */
    async teamsTeamQuestionsQuestionIdDownvoteDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdDownvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdDownvoteDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdDownvoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/downvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Deletes the downvote of a question, identified by question ID.
     * Delete question downvote
     */
    async teamsTeamQuestionsQuestionIdDownvoteDelete(requestParameters: TeamsTeamQuestionsQuestionIdDownvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdDownvoteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downvote a question, identified by question ID.
     * Downvote a question
     */
    async teamsTeamQuestionsQuestionIdDownvotePostRaw(requestParameters: TeamsTeamQuestionsQuestionIdDownvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdDownvotePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdDownvotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/downvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Downvote a question, identified by question ID.
     * Downvote a question
     */
    async teamsTeamQuestionsQuestionIdDownvotePost(requestParameters: TeamsTeamQuestionsQuestionIdDownvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdDownvotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of flag options for a question, identified by question ID.
     * Retrieve list of flag options
     */
    async teamsTeamQuestionsQuestionIdFlagsOptionsGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdFlagsOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlagOptionResponseModel>>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdFlagsOptionsGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdFlagsOptionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/flags/options`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlagOptionResponseModelFromJSON));
    }

    /**
     * Retrieve a list of flag options for a question, identified by question ID.
     * Retrieve list of flag options
     */
    async teamsTeamQuestionsQuestionIdFlagsOptionsGet(requestParameters: TeamsTeamQuestionsQuestionIdFlagsOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlagOptionResponseModel>> {
        const response = await this.teamsTeamQuestionsQuestionIdFlagsOptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Raises a flag for a question, identified by question ID.
     * Raises a flag for a question
     */
    async teamsTeamQuestionsQuestionIdFlagsPostRaw(requestParameters: TeamsTeamQuestionsQuestionIdFlagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdFlagsPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdFlagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/flags`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlagRequestModelToJSON(requestParameters['flagRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Raises a flag for a question, identified by question ID.
     * Raises a flag for a question
     */
    async teamsTeamQuestionsQuestionIdFlagsPost(requestParameters: TeamsTeamQuestionsQuestionIdFlagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamQuestionsQuestionIdFlagsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a question, identified by question ID.
     * Retrieve a question
     */
    async teamsTeamQuestionsQuestionIdGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves a question, identified by question ID.
     * Retrieve a question
     */
    async teamsTeamQuestionsQuestionIdGet(requestParameters: TeamsTeamQuestionsQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves questions linked to another question, identified by question ID.
     * Retrieve linked questions
     */
    async teamsTeamQuestionsQuestionIdLinkedGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdLinkedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkedOrRelatedQuestions>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdLinkedGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdLinkedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/linked`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkedOrRelatedQuestionsFromJSON(jsonValue));
    }

    /**
     * Retrieves questions linked to another question, identified by question ID.
     * Retrieve linked questions
     */
    async teamsTeamQuestionsQuestionIdLinkedGet(requestParameters: TeamsTeamQuestionsQuestionIdLinkedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkedOrRelatedQuestions> {
        const response = await this.teamsTeamQuestionsQuestionIdLinkedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a question, identified by question ID.
     * Update a question
     */
    async teamsTeamQuestionsQuestionIdPutRaw(requestParameters: TeamsTeamQuestionsQuestionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdPut().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionRequestModelToJSON(requestParameters['questionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Updates a question, identified by question ID.
     * Update a question
     */
    async teamsTeamQuestionsQuestionIdPut(requestParameters: TeamsTeamQuestionsQuestionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves questions related to another question, identified by question ID.
     * Retrieve related questions
     */
    async teamsTeamQuestionsQuestionIdRelatedGetRaw(requestParameters: TeamsTeamQuestionsQuestionIdRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkedOrRelatedQuestions>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdRelatedGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdRelatedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/related`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkedOrRelatedQuestionsFromJSON(jsonValue));
    }

    /**
     * Retrieves questions related to another question, identified by question ID.
     * Retrieve related questions
     */
    async teamsTeamQuestionsQuestionIdRelatedGet(requestParameters: TeamsTeamQuestionsQuestionIdRelatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkedOrRelatedQuestions> {
        const response = await this.teamsTeamQuestionsQuestionIdRelatedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the upvote of a question, identified by question ID.
     * Delete question upvote
     */
    async teamsTeamQuestionsQuestionIdUpvoteDeleteRaw(requestParameters: TeamsTeamQuestionsQuestionIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdUpvoteDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdUpvoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/upvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Deletes the upvote of a question, identified by question ID.
     * Delete question upvote
     */
    async teamsTeamQuestionsQuestionIdUpvoteDelete(requestParameters: TeamsTeamQuestionsQuestionIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdUpvoteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upvotes a question, identified by question ID.
     * Upvote a question
     */
    async teamsTeamQuestionsQuestionIdUpvotePostRaw(requestParameters: TeamsTeamQuestionsQuestionIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponseModel>> {
        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling teamsTeamQuestionsQuestionIdUpvotePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamQuestionsQuestionIdUpvotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/questions/{questionId}/upvote`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseModelFromJSON(jsonValue));
    }

    /**
     * Upvotes a question, identified by question ID.
     * Upvote a question
     */
    async teamsTeamQuestionsQuestionIdUpvotePost(requestParameters: TeamsTeamQuestionsQuestionIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponseModel> {
        const response = await this.teamsTeamQuestionsQuestionIdUpvotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TeamsTeamQuestionsGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamQuestionsGetPageSizeEnum = typeof TeamsTeamQuestionsGetPageSizeEnum[keyof typeof TeamsTeamQuestionsGetPageSizeEnum];
/**
 * @export
 */
export const TeamsTeamQuestionsQuestionIdLinkedGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamQuestionsQuestionIdLinkedGetPageSizeEnum = typeof TeamsTeamQuestionsQuestionIdLinkedGetPageSizeEnum[keyof typeof TeamsTeamQuestionsQuestionIdLinkedGetPageSizeEnum];
/**
 * @export
 */
export const TeamsTeamQuestionsQuestionIdRelatedGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamQuestionsQuestionIdRelatedGetPageSizeEnum = typeof TeamsTeamQuestionsQuestionIdRelatedGetPageSizeEnum[keyof typeof TeamsTeamQuestionsQuestionIdRelatedGetPageSizeEnum];
