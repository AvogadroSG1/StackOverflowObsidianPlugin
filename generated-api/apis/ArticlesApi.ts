/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArticleRequestModel,
  ArticleResponseModel,
  ArticleSortParameter,
  LinkedOrRelatedQuestionsSortParameter,
  PaginatedArticles,
  PaginatedLinkedOrRelatedQuestions,
  ProblemDetails,
  SortOrder,
} from '../models/index';
import {
    ArticleRequestModelFromJSON,
    ArticleRequestModelToJSON,
    ArticleResponseModelFromJSON,
    ArticleResponseModelToJSON,
    ArticleSortParameterFromJSON,
    ArticleSortParameterToJSON,
    LinkedOrRelatedQuestionsSortParameterFromJSON,
    LinkedOrRelatedQuestionsSortParameterToJSON,
    PaginatedArticlesFromJSON,
    PaginatedArticlesToJSON,
    PaginatedLinkedOrRelatedQuestionsFromJSON,
    PaginatedLinkedOrRelatedQuestionsToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models/index';

export interface TeamsTeamArticlesArticleIdDeleteRequest {
    articleId: number;
    team: string;
}

export interface TeamsTeamArticlesArticleIdGetRequest {
    articleId: number;
    team: string;
}

export interface TeamsTeamArticlesArticleIdLinkedQuestionsGetRequest {
    articleId: number;
    team: string;
    page?: number;
    pageSize?: TeamsTeamArticlesArticleIdLinkedQuestionsGetPageSizeEnum;
    sort?: LinkedOrRelatedQuestionsSortParameter;
    order?: SortOrder;
}

export interface TeamsTeamArticlesArticleIdPutRequest {
    articleId: number;
    team: string;
    articleRequestModel?: ArticleRequestModel;
}

export interface TeamsTeamArticlesArticleIdUpvoteDeleteRequest {
    articleId: number;
    team: string;
}

export interface TeamsTeamArticlesArticleIdUpvotePostRequest {
    articleId: number;
    team: string;
}

export interface TeamsTeamArticlesGetRequest {
    team: string;
    page?: number;
    pageSize?: TeamsTeamArticlesGetPageSizeEnum;
    sort?: ArticleSortParameter;
    order?: SortOrder;
    tagId?: Array<number>;
    authorId?: number;
    from?: Date;
    to?: Date;
}

export interface TeamsTeamArticlesPostRequest {
    team: string;
    articleRequestModel?: ArticleRequestModel;
}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI {

    /**
     * Deletes an article, identified by article ID.
     * Delete an article
     */
    async teamsTeamArticlesArticleIdDeleteRaw(requestParameters: TeamsTeamArticlesArticleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an article, identified by article ID.
     * Delete an article
     */
    async teamsTeamArticlesArticleIdDelete(requestParameters: TeamsTeamArticlesArticleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamArticlesArticleIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a article, identified by article ID.
     * Retrieve an article
     */
    async teamsTeamArticlesArticleIdGetRaw(requestParameters: TeamsTeamArticlesArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponseModel>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves a article, identified by article ID.
     * Retrieve an article
     */
    async teamsTeamArticlesArticleIdGet(requestParameters: TeamsTeamArticlesArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponseModel> {
        const response = await this.teamsTeamArticlesArticleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves questions linked to an article, identified by article ID.
     * Retrieve linked questions
     */
    async teamsTeamArticlesArticleIdLinkedQuestionsGetRaw(requestParameters: TeamsTeamArticlesArticleIdLinkedQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkedOrRelatedQuestions>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdLinkedQuestionsGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdLinkedQuestionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}/linked-questions`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkedOrRelatedQuestionsFromJSON(jsonValue));
    }

    /**
     * Retrieves questions linked to an article, identified by article ID.
     * Retrieve linked questions
     */
    async teamsTeamArticlesArticleIdLinkedQuestionsGet(requestParameters: TeamsTeamArticlesArticleIdLinkedQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkedOrRelatedQuestions> {
        const response = await this.teamsTeamArticlesArticleIdLinkedQuestionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an article, identified by Article ID.
     * Update an article
     */
    async teamsTeamArticlesArticleIdPutRaw(requestParameters: TeamsTeamArticlesArticleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponseModel>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdPut().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleRequestModelToJSON(requestParameters['articleRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseModelFromJSON(jsonValue));
    }

    /**
     * Updates an article, identified by Article ID.
     * Update an article
     */
    async teamsTeamArticlesArticleIdPut(requestParameters: TeamsTeamArticlesArticleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponseModel> {
        const response = await this.teamsTeamArticlesArticleIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the upvote of an article, identified by Article ID.
     * Delete article upvote
     */
    async teamsTeamArticlesArticleIdUpvoteDeleteRaw(requestParameters: TeamsTeamArticlesArticleIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponseModel>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdUpvoteDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdUpvoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}/upvote`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseModelFromJSON(jsonValue));
    }

    /**
     * Deletes the upvote of an article, identified by Article ID.
     * Delete article upvote
     */
    async teamsTeamArticlesArticleIdUpvoteDelete(requestParameters: TeamsTeamArticlesArticleIdUpvoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponseModel> {
        const response = await this.teamsTeamArticlesArticleIdUpvoteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upvotes an article, identified by Article ID.
     * Upvote an article
     */
    async teamsTeamArticlesArticleIdUpvotePostRaw(requestParameters: TeamsTeamArticlesArticleIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponseModel>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling teamsTeamArticlesArticleIdUpvotePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesArticleIdUpvotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles/{articleId}/upvote`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters['articleId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseModelFromJSON(jsonValue));
    }

    /**
     * Upvotes an article, identified by Article ID.
     * Upvote an article
     */
    async teamsTeamArticlesArticleIdUpvotePost(requestParameters: TeamsTeamArticlesArticleIdUpvotePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponseModel> {
        const response = await this.teamsTeamArticlesArticleIdUpvotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all articles on the site or team.
     * Retrieve all articles
     */
    async teamsTeamArticlesGetRaw(requestParameters: TeamsTeamArticlesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedArticles>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tagId'] = requestParameters['tagId'];
        }

        if (requestParameters['authorId'] != null) {
            queryParameters['authorId'] = requestParameters['authorId'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedArticlesFromJSON(jsonValue));
    }

    /**
     * Retrieves all articles on the site or team.
     * Retrieve all articles
     */
    async teamsTeamArticlesGet(requestParameters: TeamsTeamArticlesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedArticles> {
        const response = await this.teamsTeamArticlesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an article.
     * Create an article
     */
    async teamsTeamArticlesPostRaw(requestParameters: TeamsTeamArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponseModel>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamArticlesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/articles`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleRequestModelToJSON(requestParameters['articleRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseModelFromJSON(jsonValue));
    }

    /**
     * Creates an article.
     * Create an article
     */
    async teamsTeamArticlesPost(requestParameters: TeamsTeamArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponseModel> {
        const response = await this.teamsTeamArticlesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TeamsTeamArticlesArticleIdLinkedQuestionsGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamArticlesArticleIdLinkedQuestionsGetPageSizeEnum = typeof TeamsTeamArticlesArticleIdLinkedQuestionsGetPageSizeEnum[keyof typeof TeamsTeamArticlesArticleIdLinkedQuestionsGetPageSizeEnum];
/**
 * @export
 */
export const TeamsTeamArticlesGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamArticlesGetPageSizeEnum = typeof TeamsTeamArticlesGetPageSizeEnum[keyof typeof TeamsTeamArticlesGetPageSizeEnum];
