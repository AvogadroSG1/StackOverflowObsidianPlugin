/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedTags,
  ProblemDetails,
  SortOrder,
  SubjectMatterExpertRequestModel,
  SubjectMatterExpertResponseModel,
  TagResponseModel,
  TagsSortParameter,
} from '../models/index';
import {
    PaginatedTagsFromJSON,
    PaginatedTagsToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
    SubjectMatterExpertRequestModelFromJSON,
    SubjectMatterExpertRequestModelToJSON,
    SubjectMatterExpertResponseModelFromJSON,
    SubjectMatterExpertResponseModelToJSON,
    TagResponseModelFromJSON,
    TagResponseModelToJSON,
    TagsSortParameterFromJSON,
    TagsSortParameterToJSON,
} from '../models/index';

export interface TeamsTeamTagsGetRequest {
    team: string;
    page?: number;
    pageSize?: TeamsTeamTagsGetPageSizeEnum;
    sort?: TagsSortParameter;
    order?: SortOrder;
    partialName?: string;
    hasSmes?: boolean;
}

export interface TeamsTeamTagsTagIdGetRequest {
    tagId: number;
    team: string;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsGetRequest {
    tagId: number;
    team: string;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsPutRequest {
    tagId: number;
    team: string;
    subjectMatterExpertRequestModel?: SubjectMatterExpertRequestModel;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPostRequest {
    tagId: number;
    team: string;
    requestBody?: Array<number>;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDeleteRequest {
    tagId: number;
    userGroupId: number;
    team: string;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsUsersPostRequest {
    tagId: number;
    team: string;
    requestBody?: Array<number>;
}

export interface TeamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDeleteRequest {
    tagId: number;
    userId: number;
    team: string;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Queries all tags on the site.
     * Retrieve tags
     */
    async teamsTeamTagsGetRaw(requestParameters: TeamsTeamTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTags>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['partialName'] != null) {
            queryParameters['partialName'] = requestParameters['partialName'];
        }

        if (requestParameters['hasSmes'] != null) {
            queryParameters['hasSmes'] = requestParameters['hasSmes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagsFromJSON(jsonValue));
    }

    /**
     * Queries all tags on the site.
     * Retrieve tags
     */
    async teamsTeamTagsGet(requestParameters: TeamsTeamTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTags> {
        const response = await this.teamsTeamTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a tag, identified by tag ID.
     * Retrieve a tag
     */
    async teamsTeamTagsTagIdGetRaw(requestParameters: TeamsTeamTagsTagIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponseModel>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves a tag, identified by tag ID.
     * Retrieve a tag
     */
    async teamsTeamTagsTagIdGet(requestParameters: TeamsTeamTagsTagIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponseModel> {
        const response = await this.teamsTeamTagsTagIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the subject matter experts for a tag, identified by tag ID.
     * Retrieve subject matter experts for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsGetRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubjectMatterExpertResponseModel>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubjectMatterExpertResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves the subject matter experts for a tag, identified by tag ID.
     * Retrieve subject matter experts for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsGet(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubjectMatterExpertResponseModel> {
        const response = await this.teamsTeamTagsTagIdSubjectMatterExpertsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces the subject matter expert(s) for a tag, identified by tag ID. Send new user ID(s) and/or user group ID(s).
     * Replace subject matter expert(s) for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsPutRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubjectMatterExpertResponseModel>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsPut().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubjectMatterExpertRequestModelToJSON(requestParameters['subjectMatterExpertRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubjectMatterExpertResponseModelFromJSON(jsonValue));
    }

    /**
     * Replaces the subject matter expert(s) for a tag, identified by tag ID. Send new user ID(s) and/or user group ID(s).
     * Replace subject matter expert(s) for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsPut(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubjectMatterExpertResponseModel> {
        const response = await this.teamsTeamTagsTagIdSubjectMatterExpertsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds one or more user groups as subject matter experts to a tag, identified by tag ID and user group ID(s).
     * Add user group(s) as subject matter experts to a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPostRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubjectMatterExpertResponseModel>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts/user-groups`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubjectMatterExpertResponseModelFromJSON(jsonValue));
    }

    /**
     * Adds one or more user groups as subject matter experts to a tag, identified by tag ID and user group ID(s).
     * Add user group(s) as subject matter experts to a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPost(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubjectMatterExpertResponseModel> {
        const response = await this.teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user group as subject matter experts for a tag, identified by tag ID and user group ID.
     * Remove a user group as subject matter experts for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDeleteRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDelete().'
            );
        }

        if (requestParameters['userGroupId'] == null) {
            throw new runtime.RequiredError(
                'userGroupId',
                'Required parameter "userGroupId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts/user-groups/{userGroupId}`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"userGroupId"}}`, encodeURIComponent(String(requestParameters['userGroupId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user group as subject matter experts for a tag, identified by tag ID and user group ID.
     * Remove a user group as subject matter experts for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDelete(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamTagsTagIdSubjectMatterExpertsUserGroupsUserGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Adds one or more users as subject matter experts to a tag, identified by tag ID and user ID(s).
     * Add user(s) as subject matter expert(s) to a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUsersPostRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubjectMatterExpertResponseModel>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUsersPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts/users`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubjectMatterExpertResponseModelFromJSON(jsonValue));
    }

    /**
     * Adds one or more users as subject matter experts to a tag, identified by tag ID and user ID(s).
     * Add user(s) as subject matter expert(s) to a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUsersPost(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubjectMatterExpertResponseModel> {
        const response = await this.teamsTeamTagsTagIdSubjectMatterExpertsUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user as subject matter expert for a tag, identified by tag ID and user ID.
     * Remove a user as subject matter expert for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDeleteRaw(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/tags/{tagId}/subject-matter-experts/users/{userId}`.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user as subject matter expert for a tag, identified by tag ID and user ID.
     * Remove a user as subject matter expert for a tag
     */
    async teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDelete(requestParameters: TeamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsTeamTagsTagIdSubjectMatterExpertsUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const TeamsTeamTagsGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamTagsGetPageSizeEnum = typeof TeamsTeamTagsGetPageSizeEnum[keyof typeof TeamsTeamTagsGetPageSizeEnum];
