/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommunityJoinModel,
  CommunityLeaveModel,
  CommunityResponseModel,
  CommunitySortParameter,
  PaginatedCommunities,
  ProblemDetails,
  SortOrder,
} from '../models/index';
import {
    CommunityJoinModelFromJSON,
    CommunityJoinModelToJSON,
    CommunityLeaveModelFromJSON,
    CommunityLeaveModelToJSON,
    CommunityResponseModelFromJSON,
    CommunityResponseModelToJSON,
    CommunitySortParameterFromJSON,
    CommunitySortParameterToJSON,
    PaginatedCommunitiesFromJSON,
    PaginatedCommunitiesToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models/index';

export interface TeamsTeamCommunitiesCommunityIdGetRequest {
    communityId: number;
    team: string;
}

export interface TeamsTeamCommunitiesCommunityIdJoinBulkPostRequest {
    communityId: number;
    team: string;
    communityJoinModel?: CommunityJoinModel;
}

export interface TeamsTeamCommunitiesCommunityIdJoinPostRequest {
    communityId: number;
    team: string;
}

export interface TeamsTeamCommunitiesCommunityIdLeaveBulkPostRequest {
    communityId: number;
    team: string;
    communityLeaveModel?: CommunityLeaveModel;
}

export interface TeamsTeamCommunitiesCommunityIdLeavePostRequest {
    communityId: number;
    team: string;
}

export interface TeamsTeamCommunitiesGetRequest {
    team: string;
    page?: number;
    pageSize?: TeamsTeamCommunitiesGetPageSizeEnum;
    sort?: CommunitySortParameter;
    order?: SortOrder;
}

/**
 * 
 */
export class CommunitiesApi extends runtime.BaseAPI {

    /**
     * Retrieves a community, identified by community ID.
     * Retrieve a community
     */
    async teamsTeamCommunitiesCommunityIdGetRaw(requestParameters: TeamsTeamCommunitiesCommunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunityResponseModel>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling teamsTeamCommunitiesCommunityIdGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesCommunityIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities/{communityId}`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunityResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieves a community, identified by community ID.
     * Retrieve a community
     */
    async teamsTeamCommunitiesCommunityIdGet(requestParameters: TeamsTeamCommunitiesCommunityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunityResponseModel> {
        const response = await this.teamsTeamCommunitiesCommunityIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the given users by ID to a community, identified by community ID.
     * Join multiple users to a community
     */
    async teamsTeamCommunitiesCommunityIdJoinBulkPostRaw(requestParameters: TeamsTeamCommunitiesCommunityIdJoinBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunityResponseModel>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling teamsTeamCommunitiesCommunityIdJoinBulkPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesCommunityIdJoinBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities/{communityId}/join/bulk`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommunityJoinModelToJSON(requestParameters['communityJoinModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunityResponseModelFromJSON(jsonValue));
    }

    /**
     * Adds the given users by ID to a community, identified by community ID.
     * Join multiple users to a community
     */
    async teamsTeamCommunitiesCommunityIdJoinBulkPost(requestParameters: TeamsTeamCommunitiesCommunityIdJoinBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunityResponseModel> {
        const response = await this.teamsTeamCommunitiesCommunityIdJoinBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds current user to a community, identified by community ID.
     * Join a community
     */
    async teamsTeamCommunitiesCommunityIdJoinPostRaw(requestParameters: TeamsTeamCommunitiesCommunityIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunityResponseModel>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling teamsTeamCommunitiesCommunityIdJoinPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesCommunityIdJoinPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities/{communityId}/join`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunityResponseModelFromJSON(jsonValue));
    }

    /**
     * Adds current user to a community, identified by community ID.
     * Join a community
     */
    async teamsTeamCommunitiesCommunityIdJoinPost(requestParameters: TeamsTeamCommunitiesCommunityIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunityResponseModel> {
        const response = await this.teamsTeamCommunitiesCommunityIdJoinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the given users by ID from a community, identified by community ID.
     * Leave a community for multiple users
     */
    async teamsTeamCommunitiesCommunityIdLeaveBulkPostRaw(requestParameters: TeamsTeamCommunitiesCommunityIdLeaveBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunityResponseModel>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling teamsTeamCommunitiesCommunityIdLeaveBulkPost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesCommunityIdLeaveBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities/{communityId}/leave/bulk`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommunityLeaveModelToJSON(requestParameters['communityLeaveModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunityResponseModelFromJSON(jsonValue));
    }

    /**
     * Remove the given users by ID from a community, identified by community ID.
     * Leave a community for multiple users
     */
    async teamsTeamCommunitiesCommunityIdLeaveBulkPost(requestParameters: TeamsTeamCommunitiesCommunityIdLeaveBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunityResponseModel> {
        const response = await this.teamsTeamCommunitiesCommunityIdLeaveBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove current user from a community, identified by community ID.
     * Leave a community
     */
    async teamsTeamCommunitiesCommunityIdLeavePostRaw(requestParameters: TeamsTeamCommunitiesCommunityIdLeavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunityResponseModel>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling teamsTeamCommunitiesCommunityIdLeavePost().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesCommunityIdLeavePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities/{communityId}/leave`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunityResponseModelFromJSON(jsonValue));
    }

    /**
     * Remove current user from a community, identified by community ID.
     * Leave a community
     */
    async teamsTeamCommunitiesCommunityIdLeavePost(requestParameters: TeamsTeamCommunitiesCommunityIdLeavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunityResponseModel> {
        const response = await this.teamsTeamCommunitiesCommunityIdLeavePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queries all communities on the site.
     * Retrieves all communities on the site.
     */
    async teamsTeamCommunitiesGetRaw(requestParameters: TeamsTeamCommunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCommunities>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling teamsTeamCommunitiesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/teams/{team}/communities`.replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCommunitiesFromJSON(jsonValue));
    }

    /**
     * Queries all communities on the site.
     * Retrieves all communities on the site.
     */
    async teamsTeamCommunitiesGet(requestParameters: TeamsTeamCommunitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCommunities> {
        const response = await this.teamsTeamCommunitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TeamsTeamCommunitiesGetPageSizeEnum = {
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_50: 50,
    NUMBER_100: 100
} as const;
export type TeamsTeamCommunitiesGetPageSizeEnum = typeof TeamsTeamCommunitiesGetPageSizeEnum[keyof typeof TeamsTeamCommunitiesGetPageSizeEnum];
