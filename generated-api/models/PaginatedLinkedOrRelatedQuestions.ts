/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionSummaryResponseModel } from './QuestionSummaryResponseModel';
import {
    QuestionSummaryResponseModelFromJSON,
    QuestionSummaryResponseModelFromJSONTyped,
    QuestionSummaryResponseModelToJSON,
} from './QuestionSummaryResponseModel';
import type { SortOrder } from './SortOrder';
import {
    SortOrderFromJSON,
    SortOrderFromJSONTyped,
    SortOrderToJSON,
} from './SortOrder';
import type { LinkedOrRelatedQuestionsSortParameter } from './LinkedOrRelatedQuestionsSortParameter';
import {
    LinkedOrRelatedQuestionsSortParameterFromJSON,
    LinkedOrRelatedQuestionsSortParameterFromJSONTyped,
    LinkedOrRelatedQuestionsSortParameterToJSON,
} from './LinkedOrRelatedQuestionsSortParameter';

/**
 * 
 * @export
 * @interface PaginatedLinkedOrRelatedQuestions
 */
export interface PaginatedLinkedOrRelatedQuestions {
    /**
     * Total count. The total number of records found.
     * @type {number}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    readonly totalCount?: number;
    /**
     * Page size. The number of records to retrieve per page.
     * @type {number}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    readonly pageSize?: number;
    /**
     * Page. The number of the current page.
     * @type {number}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    readonly page?: number;
    /**
     * Total pages. The total number of pages available.
     * @type {number}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    readonly totalPages?: number;
    /**
     * 
     * @type {LinkedOrRelatedQuestionsSortParameter}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    sort?: LinkedOrRelatedQuestionsSortParameter;
    /**
     * 
     * @type {SortOrder}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    order?: SortOrder;
    /**
     * 
     * @type {Array<QuestionSummaryResponseModel>}
     * @memberof PaginatedLinkedOrRelatedQuestions
     */
    readonly items?: Array<QuestionSummaryResponseModel>;
}



/**
 * Check if a given object implements the PaginatedLinkedOrRelatedQuestions interface.
 */
export function instanceOfPaginatedLinkedOrRelatedQuestions(value: object): value is PaginatedLinkedOrRelatedQuestions {
    return true;
}

export function PaginatedLinkedOrRelatedQuestionsFromJSON(json: any): PaginatedLinkedOrRelatedQuestions {
    return PaginatedLinkedOrRelatedQuestionsFromJSONTyped(json, false);
}

export function PaginatedLinkedOrRelatedQuestionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaginatedLinkedOrRelatedQuestions {
    if (json == null) {
        return json;
    }
    return {
        
        'totalCount': json['totalCount'] == null ? undefined : json['totalCount'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'page': json['page'] == null ? undefined : json['page'],
        'totalPages': json['totalPages'] == null ? undefined : json['totalPages'],
        'sort': json['sort'] == null ? undefined : LinkedOrRelatedQuestionsSortParameterFromJSON(json['sort']),
        'order': json['order'] == null ? undefined : SortOrderFromJSON(json['order']),
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(QuestionSummaryResponseModelFromJSON)),
    };
}

export function PaginatedLinkedOrRelatedQuestionsToJSON(value?: Omit<PaginatedLinkedOrRelatedQuestions, 'totalCount'|'pageSize'|'page'|'totalPages'|'items'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sort': LinkedOrRelatedQuestionsSortParameterToJSON(value['sort']),
        'order': SortOrderToJSON(value['order']),
    };
}

