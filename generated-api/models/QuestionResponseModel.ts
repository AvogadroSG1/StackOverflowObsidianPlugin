/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BountyResponseModel } from './BountyResponseModel';
import {
    BountyResponseModelFromJSON,
    BountyResponseModelFromJSONTyped,
    BountyResponseModelToJSON,
} from './BountyResponseModel';
import type { CommunitySummaryResponseModel } from './CommunitySummaryResponseModel';
import {
    CommunitySummaryResponseModelFromJSON,
    CommunitySummaryResponseModelFromJSONTyped,
    CommunitySummaryResponseModelToJSON,
} from './CommunitySummaryResponseModel';
import type { MentionedUserGroupResponseModel } from './MentionedUserGroupResponseModel';
import {
    MentionedUserGroupResponseModelFromJSON,
    MentionedUserGroupResponseModelFromJSONTyped,
    MentionedUserGroupResponseModelToJSON,
} from './MentionedUserGroupResponseModel';
import type { TagSummaryResponseModel } from './TagSummaryResponseModel';
import {
    TagSummaryResponseModelFromJSON,
    TagSummaryResponseModelFromJSONTyped,
    TagSummaryResponseModelToJSON,
} from './TagSummaryResponseModel';
import type { MentionedUserResponseModel } from './MentionedUserResponseModel';
import {
    MentionedUserResponseModelFromJSON,
    MentionedUserResponseModelFromJSONTyped,
    MentionedUserResponseModelToJSON,
} from './MentionedUserResponseModel';
import type { UserSummaryResponseModel } from './UserSummaryResponseModel';
import {
    UserSummaryResponseModelFromJSON,
    UserSummaryResponseModelFromJSONTyped,
    UserSummaryResponseModelToJSON,
} from './UserSummaryResponseModel';

/**
 * 
 * @export
 * @interface QuestionResponseModel
 */
export interface QuestionResponseModel {
    /**
     * 
     * @type {Array<CommunitySummaryResponseModel>}
     * @memberof QuestionResponseModel
     */
    communities?: Array<CommunitySummaryResponseModel>;
    /**
     * ID. The question's unique identifier.
     * @type {number}
     * @memberof QuestionResponseModel
     */
    id?: number;
    /**
     * Title. The actual question, stated briefly in one sentence.
     * @type {string}
     * @memberof QuestionResponseModel
     */
    title?: string;
    /**
     * Body. Additional details to clarify the question.
     * @type {string}
     * @memberof QuestionResponseModel
     */
    body?: string;
    /**
     * Tags. Tags associated with the question.
     * @type {Array<TagSummaryResponseModel>}
     * @memberof QuestionResponseModel
     */
    tags?: Array<TagSummaryResponseModel>;
    /**
     * 
     * @type {UserSummaryResponseModel}
     * @memberof QuestionResponseModel
     */
    owner?: UserSummaryResponseModel;
    /**
     * 
     * @type {UserSummaryResponseModel}
     * @memberof QuestionResponseModel
     */
    lastEditor?: UserSummaryResponseModel;
    /**
     * Creation date. The date and time the question was created.
     * @type {Date}
     * @memberof QuestionResponseModel
     */
    creationDate?: Date;
    /**
     * Last activity date. The date and time the question or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.
     * @type {Date}
     * @memberof QuestionResponseModel
     */
    lastActivityDate?: Date | null;
    /**
     * Score. Calculated by subtracting the number of downvotes from the number of upvotes
     * @type {number}
     * @memberof QuestionResponseModel
     */
    score?: number;
    /**
     * Is answered. Returns true if the question has at least one answer.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    isAnswered?: boolean;
    /**
     * View count. The number of times users have viewed this question.
     * @type {number}
     * @memberof QuestionResponseModel
     */
    viewCount?: number;
    /**
     * Share URL. The question's direct URL.
     * @type {string}
     * @memberof QuestionResponseModel
     */
    shareUrl?: string;
    /**
     * Is deleted. Returns true if the question was deleted.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    isDeleted?: boolean;
    /**
     * Is obsolete. Returns true if the question was marked by a moderator as obsolete.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    isObsolete?: boolean;
    /**
     * Is closed. Returns true if the question was closed by a moderator.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    isClosed?: boolean;
    /**
     * 
     * @type {BountyResponseModel}
     * @memberof QuestionResponseModel
     */
    bounty?: BountyResponseModel;
    /**
     * Body in Markdown format.
     * @type {string}
     * @memberof QuestionResponseModel
     */
    bodyMarkdown?: string;
    /**
     * 
     * @type {Array<MentionedUserResponseModel>}
     * @memberof QuestionResponseModel
     */
    mentionedUsers?: Array<MentionedUserResponseModel>;
    /**
     * 
     * @type {Array<MentionedUserGroupResponseModel>}
     * @memberof QuestionResponseModel
     */
    mentionedUserGroups?: Array<MentionedUserGroupResponseModel>;
    /**
     * User is following. Returns true if the logged-in user followed the question.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    userIsFollowing?: boolean;
    /**
     * User has upvoted. Returns true if the logged-in user has upvoted the question.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    userHasUpvoted?: boolean;
    /**
     * User has downvoted. Returns true if the logged-in user has downvoted the question.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    userHasDownvoted?: boolean;
    /**
     * User has bookmarked. Returns true if the logged-in user has bookmarked the question.
     * @type {boolean}
     * @memberof QuestionResponseModel
     */
    userHasBookmarked?: boolean;
}

/**
 * Check if a given object implements the QuestionResponseModel interface.
 */
export function instanceOfQuestionResponseModel(value: object): value is QuestionResponseModel {
    return true;
}

export function QuestionResponseModelFromJSON(json: any): QuestionResponseModel {
    return QuestionResponseModelFromJSONTyped(json, false);
}

export function QuestionResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'communities': json['communities'] == null ? undefined : ((json['communities'] as Array<any>).map(CommunitySummaryResponseModelFromJSON)),
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'] == null ? undefined : json['title'],
        'body': json['body'] == null ? undefined : json['body'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagSummaryResponseModelFromJSON)),
        'owner': json['owner'] == null ? undefined : UserSummaryResponseModelFromJSON(json['owner']),
        'lastEditor': json['lastEditor'] == null ? undefined : UserSummaryResponseModelFromJSON(json['lastEditor']),
        'creationDate': json['creationDate'] == null ? undefined : (new Date(json['creationDate'])),
        'lastActivityDate': json['lastActivityDate'] == null ? undefined : (new Date(json['lastActivityDate'])),
        'score': json['score'] == null ? undefined : json['score'],
        'isAnswered': json['isAnswered'] == null ? undefined : json['isAnswered'],
        'viewCount': json['viewCount'] == null ? undefined : json['viewCount'],
        'shareUrl': json['shareUrl'] == null ? undefined : json['shareUrl'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'isObsolete': json['isObsolete'] == null ? undefined : json['isObsolete'],
        'isClosed': json['isClosed'] == null ? undefined : json['isClosed'],
        'bounty': json['bounty'] == null ? undefined : BountyResponseModelFromJSON(json['bounty']),
        'bodyMarkdown': json['bodyMarkdown'] == null ? undefined : json['bodyMarkdown'],
        'mentionedUsers': json['mentionedUsers'] == null ? undefined : ((json['mentionedUsers'] as Array<any>).map(MentionedUserResponseModelFromJSON)),
        'mentionedUserGroups': json['mentionedUserGroups'] == null ? undefined : ((json['mentionedUserGroups'] as Array<any>).map(MentionedUserGroupResponseModelFromJSON)),
        'userIsFollowing': json['userIsFollowing'] == null ? undefined : json['userIsFollowing'],
        'userHasUpvoted': json['userHasUpvoted'] == null ? undefined : json['userHasUpvoted'],
        'userHasDownvoted': json['userHasDownvoted'] == null ? undefined : json['userHasDownvoted'],
        'userHasBookmarked': json['userHasBookmarked'] == null ? undefined : json['userHasBookmarked'],
    };
}

export function QuestionResponseModelToJSON(value?: QuestionResponseModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'communities': value['communities'] == null ? undefined : ((value['communities'] as Array<any>).map(CommunitySummaryResponseModelToJSON)),
        'id': value['id'],
        'title': value['title'],
        'body': value['body'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagSummaryResponseModelToJSON)),
        'owner': UserSummaryResponseModelToJSON(value['owner']),
        'lastEditor': UserSummaryResponseModelToJSON(value['lastEditor']),
        'creationDate': value['creationDate'] == null ? undefined : ((value['creationDate']).toISOString()),
        'lastActivityDate': value['lastActivityDate'] == null ? undefined : ((value['lastActivityDate'] as any).toISOString()),
        'score': value['score'],
        'isAnswered': value['isAnswered'],
        'viewCount': value['viewCount'],
        'shareUrl': value['shareUrl'],
        'isDeleted': value['isDeleted'],
        'isObsolete': value['isObsolete'],
        'isClosed': value['isClosed'],
        'bounty': BountyResponseModelToJSON(value['bounty']),
        'bodyMarkdown': value['bodyMarkdown'],
        'mentionedUsers': value['mentionedUsers'] == null ? undefined : ((value['mentionedUsers'] as Array<any>).map(MentionedUserResponseModelToJSON)),
        'mentionedUserGroups': value['mentionedUserGroups'] == null ? undefined : ((value['mentionedUserGroups'] as Array<any>).map(MentionedUserGroupResponseModelToJSON)),
        'userIsFollowing': value['userIsFollowing'],
        'userHasUpvoted': value['userHasUpvoted'],
        'userHasDownvoted': value['userHasDownvoted'],
        'userHasBookmarked': value['userHasBookmarked'],
    };
}

