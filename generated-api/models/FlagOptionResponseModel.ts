/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FlagOptionResponseModel
 */
export interface FlagOptionResponseModel {
    /**
     * Flag option ID. Use this id when raising a flag.
     * @type {number}
     * @memberof FlagOptionResponseModel
     */
    optionId?: number | null;
    /**
     * Title of the dialog for flag selection.
     * @type {string}
     * @memberof FlagOptionResponseModel
     */
    dialogTitle?: string | null;
    /**
     * Title of the flagging option.
     * @type {string}
     * @memberof FlagOptionResponseModel
     */
    title?: string | null;
    /**
     * Description of the flagging option.
     * @type {string}
     * @memberof FlagOptionResponseModel
     */
    description?: string | null;
    /**
     * Indicates if the Comment field must be present when raising the flag.
     * @type {boolean}
     * @memberof FlagOptionResponseModel
     */
    requiresComment?: boolean;
    /**
     * Indicates if the TargetSite field must be present when raising the flag.
     * @type {boolean}
     * @memberof FlagOptionResponseModel
     */
    requiresSite?: boolean;
    /**
     * Indicates if the RelatedQuestionId field must be present when raising the flag.
     * @type {boolean}
     * @memberof FlagOptionResponseModel
     */
    requiresQuestionId?: boolean;
    /**
     * Indicates that the current user has already raised this flag.
     * @type {boolean}
     * @memberof FlagOptionResponseModel
     */
    isRetraction?: boolean;
    /**
     * Used to represend a list of sub options. Flag options that have sub options can not be selected when raising a flag.
     * @type {Array<FlagOptionResponseModel>}
     * @memberof FlagOptionResponseModel
     */
    subOptions?: Array<FlagOptionResponseModel> | null;
}

/**
 * Check if a given object implements the FlagOptionResponseModel interface.
 */
export function instanceOfFlagOptionResponseModel(value: object): value is FlagOptionResponseModel {
    return true;
}

export function FlagOptionResponseModelFromJSON(json: any): FlagOptionResponseModel {
    return FlagOptionResponseModelFromJSONTyped(json, false);
}

export function FlagOptionResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlagOptionResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'optionId': json['optionId'] == null ? undefined : json['optionId'],
        'dialogTitle': json['dialogTitle'] == null ? undefined : json['dialogTitle'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'requiresComment': json['requiresComment'] == null ? undefined : json['requiresComment'],
        'requiresSite': json['requiresSite'] == null ? undefined : json['requiresSite'],
        'requiresQuestionId': json['requiresQuestionId'] == null ? undefined : json['requiresQuestionId'],
        'isRetraction': json['isRetraction'] == null ? undefined : json['isRetraction'],
        'subOptions': json['subOptions'] == null ? undefined : ((json['subOptions'] as Array<any>).map(FlagOptionResponseModelFromJSON)),
    };
}

export function FlagOptionResponseModelToJSON(value?: FlagOptionResponseModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'optionId': value['optionId'],
        'dialogTitle': value['dialogTitle'],
        'title': value['title'],
        'description': value['description'],
        'requiresComment': value['requiresComment'],
        'requiresSite': value['requiresSite'],
        'requiresQuestionId': value['requiresQuestionId'],
        'isRetraction': value['isRetraction'],
        'subOptions': value['subOptions'] == null ? undefined : ((value['subOptions'] as Array<any>).map(FlagOptionResponseModelToJSON)),
    };
}

