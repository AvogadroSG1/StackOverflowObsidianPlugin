/* tslint:disable */
/* eslint-disable */
/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BountyResponseModel } from './BountyResponseModel';
import {
    BountyResponseModelFromJSON,
    BountyResponseModelFromJSONTyped,
    BountyResponseModelToJSON,
} from './BountyResponseModel';
import type { TagSummaryResponseModel } from './TagSummaryResponseModel';
import {
    TagSummaryResponseModelFromJSON,
    TagSummaryResponseModelFromJSONTyped,
    TagSummaryResponseModelToJSON,
} from './TagSummaryResponseModel';
import type { UserSummaryResponseModel } from './UserSummaryResponseModel';
import {
    UserSummaryResponseModelFromJSON,
    UserSummaryResponseModelFromJSONTyped,
    UserSummaryResponseModelToJSON,
} from './UserSummaryResponseModel';

/**
 * 
 * @export
 * @interface QuestionSummaryResponseModel
 */
export interface QuestionSummaryResponseModel {
    /**
     * ID. The question's unique identifier.
     * @type {number}
     * @memberof QuestionSummaryResponseModel
     */
    id?: number;
    /**
     * Title. The actual question, stated briefly in one sentence.
     * @type {string}
     * @memberof QuestionSummaryResponseModel
     */
    title?: string;
    /**
     * Body. Additional details to clarify the question.
     * @type {string}
     * @memberof QuestionSummaryResponseModel
     */
    body?: string;
    /**
     * Tags. Tags associated with the question.
     * @type {Array<TagSummaryResponseModel>}
     * @memberof QuestionSummaryResponseModel
     */
    tags?: Array<TagSummaryResponseModel>;
    /**
     * 
     * @type {UserSummaryResponseModel}
     * @memberof QuestionSummaryResponseModel
     */
    owner?: UserSummaryResponseModel;
    /**
     * 
     * @type {UserSummaryResponseModel}
     * @memberof QuestionSummaryResponseModel
     */
    lastEditor?: UserSummaryResponseModel;
    /**
     * Creation date. The date and time the question was created.
     * @type {Date}
     * @memberof QuestionSummaryResponseModel
     */
    creationDate?: Date;
    /**
     * Last activity date. The date and time the question or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.
     * @type {Date}
     * @memberof QuestionSummaryResponseModel
     */
    lastActivityDate?: Date | null;
    /**
     * Score. Calculated by subtracting the number of downvotes from the number of upvotes
     * @type {number}
     * @memberof QuestionSummaryResponseModel
     */
    score?: number;
    /**
     * Is answered. Returns true if the question has at least one answer.
     * @type {boolean}
     * @memberof QuestionSummaryResponseModel
     */
    isAnswered?: boolean;
    /**
     * View count. The number of times users have viewed this question.
     * @type {number}
     * @memberof QuestionSummaryResponseModel
     */
    viewCount?: number;
    /**
     * Share URL. The question's direct URL.
     * @type {string}
     * @memberof QuestionSummaryResponseModel
     */
    shareUrl?: string;
    /**
     * Is deleted. Returns true if the question was deleted.
     * @type {boolean}
     * @memberof QuestionSummaryResponseModel
     */
    isDeleted?: boolean;
    /**
     * Is obsolete. Returns true if the question was marked by a moderator as obsolete.
     * @type {boolean}
     * @memberof QuestionSummaryResponseModel
     */
    isObsolete?: boolean;
    /**
     * Is closed. Returns true if the question was closed by a moderator.
     * @type {boolean}
     * @memberof QuestionSummaryResponseModel
     */
    isClosed?: boolean;
    /**
     * 
     * @type {BountyResponseModel}
     * @memberof QuestionSummaryResponseModel
     */
    bounty?: BountyResponseModel;
}

/**
 * Check if a given object implements the QuestionSummaryResponseModel interface.
 */
export function instanceOfQuestionSummaryResponseModel(value: object): value is QuestionSummaryResponseModel {
    return true;
}

export function QuestionSummaryResponseModelFromJSON(json: any): QuestionSummaryResponseModel {
    return QuestionSummaryResponseModelFromJSONTyped(json, false);
}

export function QuestionSummaryResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionSummaryResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'] == null ? undefined : json['title'],
        'body': json['body'] == null ? undefined : json['body'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagSummaryResponseModelFromJSON)),
        'owner': json['owner'] == null ? undefined : UserSummaryResponseModelFromJSON(json['owner']),
        'lastEditor': json['lastEditor'] == null ? undefined : UserSummaryResponseModelFromJSON(json['lastEditor']),
        'creationDate': json['creationDate'] == null ? undefined : (new Date(json['creationDate'])),
        'lastActivityDate': json['lastActivityDate'] == null ? undefined : (new Date(json['lastActivityDate'])),
        'score': json['score'] == null ? undefined : json['score'],
        'isAnswered': json['isAnswered'] == null ? undefined : json['isAnswered'],
        'viewCount': json['viewCount'] == null ? undefined : json['viewCount'],
        'shareUrl': json['shareUrl'] == null ? undefined : json['shareUrl'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'isObsolete': json['isObsolete'] == null ? undefined : json['isObsolete'],
        'isClosed': json['isClosed'] == null ? undefined : json['isClosed'],
        'bounty': json['bounty'] == null ? undefined : BountyResponseModelFromJSON(json['bounty']),
    };
}

export function QuestionSummaryResponseModelToJSON(value?: QuestionSummaryResponseModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'title': value['title'],
        'body': value['body'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagSummaryResponseModelToJSON)),
        'owner': UserSummaryResponseModelToJSON(value['owner']),
        'lastEditor': UserSummaryResponseModelToJSON(value['lastEditor']),
        'creationDate': value['creationDate'] == null ? undefined : ((value['creationDate']).toISOString()),
        'lastActivityDate': value['lastActivityDate'] == null ? undefined : ((value['lastActivityDate'] as any).toISOString()),
        'score': value['score'],
        'isAnswered': value['isAnswered'],
        'viewCount': value['viewCount'],
        'shareUrl': value['shareUrl'],
        'isDeleted': value['isDeleted'],
        'isObsolete': value['isObsolete'],
        'isClosed': value['isClosed'],
        'bounty': BountyResponseModelToJSON(value['bounty']),
    };
}

